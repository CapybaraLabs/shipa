buildscript {
	configurations.classpath {
		resolutionStrategy.activateDependencyLocking()
	}
}

plugins {
	id "org.jetbrains.kotlin.jvm"
	id "com.github.ben-manes.versions"
	id "org.springframework.boot"
	id "org.jetbrains.kotlin.kapt"
	id "org.jetbrains.kotlin.plugin.spring" // opens certain classes
	id "com.adarshr.test-logger"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(theJavaVersion)
		vendor = JvmVendorSpec.ADOPTIUM
	}
	consistentResolution {
		useCompileClasspathVersions()
	}
}

tasks.withType(JavaCompile) {
	dependsOn(processResources)
	options.encoding = "UTF-8"
	options.release.set(theJavaVersion.toInteger())
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xmaxerrs" << "10000" << "-Xdiags:verbose"
	options.incremental = true
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
	kotlinOptions.jvmTarget = theJavaVersion
}

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}

configurations {
	//undertow master race
	implementation.exclude module: "spring-boot-starter-reactor-netty"
	implementation.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
	implementation platform(libs.kotlin.bom)
	implementation platform(libs.spring.boot.bom)
	kapt platform(libs.spring.boot.bom)
	developmentOnly platform(libs.spring.boot.bom)
	testImplementation platform(libs.spring.boot.bom)
	testRuntimeOnly platform(libs.spring.boot.bom)


	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "org.jetbrains.kotlin:kotlin-reflect"
	implementation "org.springframework.boot:spring-boot-starter"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
	implementation libs.saltycoffee

	implementation "org.springframework.boot:spring-boot-starter-undertow"
	kapt "org.springframework.boot:spring-boot-configuration-processor"
	developmentOnly "org.springframework.boot:spring-boot-devtools"

	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		//don't drag in weird JSON impl with conflicting JSONObject and missing gradle metadata
		exclude group: "com.vaadin.external.google", module: "android-json"
	}
	testImplementation "org.mockito:mockito-inline"
	implementation libs.mockitokotlin
	implementation "com.jayway.jsonpath:json-path-assert"
}

test {
	useJUnitPlatform()
	jvmArgs("-XX:TieredStopAtLevel=1")
}

testlogger {
	theme "mocha"
}


springBoot {
	mainClass = "dev.capybaralabs.shipa.LauncherKt"
}

jar {
	onlyIf { false }
}

dependencyLocking {
	lockAllConfigurations()
}

// ./gradlew resolveAndLockAll --write-locks
task resolveAndLockAll {
	doFirst {
		assert gradle.startParameter.writeDependencyLocks
	}
	doLast {
		configurations.all {
			resolutionStrategy {
				componentSelection properReleasesOnly()
			}
		}
		configurations
				.findAll { it.canBeResolved }
				.each { it.resolve() }
	}
}

tasks.named("dependencyUpdates").configure {
	resolutionStrategy {
		componentSelection properReleasesOnly()
	}
	checkConstraints = true
	checkBuildEnvironmentConstraints = true
	gradleReleaseChannel = "current"
}


static def properReleasesOnly() {
	return { rules ->
		rules.all { ComponentSelection selection ->
			if (isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)) {
				reject('Release candidate')
			}
		}
	}
}

static def isNonStable(String version) {
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}
