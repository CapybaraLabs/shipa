buildscript {
	configurations.classpath {
		resolutionStrategy.activateDependencyLocking()
	}
}

plugins {
	id "java-library"
	id "org.jetbrains.kotlin.jvm"
	id "com.github.ben-manes.versions"
	id "org.jetbrains.kotlin.plugin.spring" // opens certain classes
}

allprojects {
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(theJavaVersion)
			vendor = JvmVendorSpec.ADOPTIUM
		}
		consistentResolution {
			useCompileClasspathVersions()
		}
	}

	tasks.withType(JavaCompile) {
		dependsOn(processResources)
		options.encoding = "UTF-8"
		options.release.set(theJavaVersion.toInteger())
		options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xmaxerrs" << "10000" << "-Xdiags:verbose"
		options.incremental = true
	}
	tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
		kotlinOptions.jvmTarget = theJavaVersion
	}

	repositories {
		// Use Maven Central for resolving dependencies.
		mavenCentral()
	}
}

dependencies {
	api platform(libs.kotlin.bom)
	api platform(libs.spring.boot.bom)

	api "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	api "org.jetbrains.kotlin:kotlin-reflect"
	api "org.springframework.boot:spring-boot-starter"
	api "org.springframework.boot:spring-boot-starter-web"
	api "com.fasterxml.jackson.module:jackson-module-kotlin"
	implementation libs.saltycoffee
}

dependencyLocking {
	lockAllConfigurations()
}

// ./gradlew resolveAndLockAll --write-locks
task resolveAndLockAll {
	doFirst {
		assert gradle.startParameter.writeDependencyLocks
	}
	doLast {
		configurations.all {
			resolutionStrategy {
				componentSelection properReleasesOnly()
			}
		}
		configurations
				.findAll { it.canBeResolved }
				.each { it.resolve() }
	}
}

tasks.named("dependencyUpdates").configure {
	resolutionStrategy {
		componentSelection properReleasesOnly()
	}
	checkConstraints = true
	checkBuildEnvironmentConstraints = true
	gradleReleaseChannel = "current"
}


static def properReleasesOnly() {
	return { rules ->
		rules.all { ComponentSelection selection ->
			if (isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)) {
				reject('Release candidate')
			}
		}
	}
}

static def isNonStable(String version) {
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}
